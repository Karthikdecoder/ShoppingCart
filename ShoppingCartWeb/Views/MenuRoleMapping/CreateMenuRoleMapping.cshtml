@model ShoppingCartWeb.Models.VM.MenuRoleMappingVM

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<br />

<form asp-action="CreateMenuRoleMapping" id="menuRoleMappingForm">
    <div class="container border p-3">
        <style>
            .text-dark {
                font-size: 24px;
            }
        </style>
        <h1 class="text-dark"> Add MenuRoleMapping </h1>

        <hr />

        <div class="row">
            <div class="col-md-6">


                <div class="row pb-3">
                    <div class="col-12">
                        <label asp-for="MenuRoleMapping.RoleId" class="control-label pt-2" style="font-size:17px;">Role</label>
                    </div>
                    <div class="col-6">
                        <select asp-for="MenuRoleMapping.RoleId" id="roleId" class="form-control" asp-items="@Model.RoleList" onchange="onRoleChange()">
                            <option value="" disabled selected>--Select Role--</option>
                        </select>
                        <span asp-validation-for="MenuRoleMapping.RoleId" class="text-danger"></span>
                    </div>
                </div>


            </div>
        </div>

        <div class="row">
            <div class="col-12">


                @if (Model.MenuList != null)
                {
                    <table class="table table-bordered" style="width:85%;">
                        <thead>
                            <tr>
                                <th>Menu</th>
                                <th>Main Menu</th>
                                <th>Checkbox</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var mainMenu in Model.MenuList)
                            {
                                <tr>
                                    <td>
                                        @mainMenu.Text
                                    </td>
                                    <td>

                                        @if (mainMenu.ParentId != 0)
                                        {
                                            var parentMenu = Model.MenuList.FirstOrDefault(m => m.Value == mainMenu.ParentId);
                                            @parentMenu.Text
                                        }

                                    </td>
                                    <td>

                                        @* <label>
                                <input type="checkbox" name="MenuRoleMapping.SelectedMenuIds" value="@mainMenu.Value" id="menu_@mainMenu.Value"
                                @(Model.MenuRoleMapping.SelectedMenuIds != null && Model.MenuRoleMapping.SelectedMenuIds.Contains(mainMenu.Value) ? "checked" : "") />
                                </label>*@

                                        <label>
                                            <input type="checkbox" name="MenuRoleMapping.SelectedMenuIds" value="@mainMenu.Value" id="menu_@mainMenu.Value"
                                            @(Model.MenuRoleMapping.SelectedMenuIds != null && Model.MenuRoleMapping.SelectedMenuIds.Contains(mainMenu.Value) ? "checked" : "")
                                                   data-parentid="@mainMenu.ParentId" onchange="onMenuChange('@mainMenu.Value', '@mainMenu.ParentId')" />
                                        </label>

                                        <input type="hidden" asp-for="MenuRoleMapping.SelectedMenuIds" id="selectedMenuIds" name="MenuRoleMapping.SelectedMenuIds" />

                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }

            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="col-2 offset-10">

                    <input type="submit" value="Save" class="btn btn-success form-control" style="font-size: 13px;" id="submitButton" />

                </div>
            </div>
        </div>

    </div>
</form>

@section Scripts
    {
    <script>
        function onRoleChange() {
            var roleId = $("#roleId").val(); // Get the selected RoleId

            // Make an AJAX request to your controller action

            $.ajax({

                url: '/MenuRoleMapping/GetMenuIds',
                type: 'GET',
                data: { roleId: roleId },

                success: function (data) {

                    // Update the hidden input field with selected menu IDs
                    $("#selectedMenuIds").val(data.join(',')); // Convert the array to a comma-separated string

                    // Iterate through the returned menu IDs and check/uncheck checkboxes
                    $('input[type="checkbox"]').prop('checked', false); // Uncheck all checkboxes

                    $.each(data, function (index, menuId) {
                        $('#menu_' + menuId).prop('checked', true); // Check checkboxes for selected menu IDs
                    });
                },

                error: function () {
                    alert('An error occurred while fetching menu IDs.');
                }

            });
        }
    </script>

    <script>
        function onMenuChange(menuId, parentId) {

            if (parentId !== "0") {
                // This menu has a parent; you can handle child menu selection here
                console.log('Selected child menu with ID: ' + menuId + ', Parent ID: ' + parentId);

                // You can make an AJAX request or perform any other actions as needed for child menus
            }

            else {
                // This menu is a parent menu; handle parent menu selection here
                console.log('Selected parent menu with ID: ' + menuId);

                // Check if the parent menu is checked or unchecked
                var isChecked = $('#menu_' + menuId).prop('checked');

                // Find all sub-menu checkboxes with the same parent ID
                $('input[type="checkbox"]').each(function () {
                    if ($(this).data('parentid') === menuId) {
                        // Check or uncheck the sub-menu based on the parent menu's state
                        $(this).prop('checked', isChecked);
                    }
                });

                // You can make an AJAX request or perform any other actions as needed for parent menus
            }
        }
    </script>


}
